"""
Module de collecte de donn√©es depuis CryptoCompare pour l'historique complet
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import os
import requests
from config import *

class DataCollector:
    def __init__(self, timeframe=None):
        """Initialise le collecteur de donn√©es"""
        self.timeframe = timeframe or TIMEFRAME
        self.api_base = "https://min-api.cryptocompare.com/data"
        
    def fetch_ohlcv_data(self, symbol='BTC', timeframe=None, since=None, limit=2000):
        """
        R√©cup√®re les donn√©es OHLCV depuis CryptoCompare
        """
        if timeframe is None:
            timeframe = self.timeframe
            
        try:
            # Mapper les timeframes vers les endpoints CryptoCompare
            endpoint_map = {
                '1m': 'histominute',
                '5m': 'histominute',
                '15m': 'histominute', 
                '30m': 'histominute',
                '1h': 'histohour',
                '2h': 'histohour',
                '4h': 'histohour',
                '1d': 'histoday'
            }
            
            # Calculer l'agr√©gation n√©cessaire
            aggregate_map = {
                '1m': 1,
                '5m': 5,
                '15m': 15,
                '30m': 30,
                '1h': 1,
                '2h': 2,
                '4h': 4,
                '1d': 1
            }
            
            endpoint = endpoint_map.get(timeframe, 'histohour')
            aggregate = aggregate_map.get(timeframe, 1)
            
            # Calculer le timestamp de fin (maintenant)
            to_ts = int(datetime.now().timestamp())
            
            # URL de l'API
            url = f"{self.api_base}/v2/{endpoint}"
            
            all_data = []
            
            # CryptoCompare limite √† 2000 points par requ√™te
            # Pour obtenir tout l'historique, on fait plusieurs requ√™tes
            while True:
                params = {
                    'fsym': symbol,
                    'tsym': 'USD',
                    'limit': 2000,
                    'toTs': to_ts,
                    'aggregate': aggregate
                }
                
                response = requests.get(url, params=params)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get('Response') == 'Success' and data.get('Data', {}).get('Data'):
                        ohlcv_data = data['Data']['Data']
                        
                        # Ajouter les donn√©es
                        all_data = ohlcv_data + all_data
                        
                        # Si on a atteint la date de d√©but souhait√©e
                        if since:
                            first_timestamp = ohlcv_data[0]['time'] * 1000
                            if first_timestamp <= since:
                                break
                        
                        # Pr√©parer pour la prochaine requ√™te
                        to_ts = ohlcv_data[0]['time'] - 1
                        
                        # Si on remonte avant 2010, arr√™ter
                        if to_ts < int(datetime(2010, 1, 1).timestamp()):
                            break
                        
                        # Limite de s√©curit√©
                        if len(all_data) > 100000:  # ~11 ans de donn√©es 4H
                            break
                        
                        # Pause pour √©viter le rate limiting
                        time.sleep(0.2)
                    else:
                        break
                else:
                    print(f"Erreur API CryptoCompare: {response.status_code}")
                    break
            
            # Convertir en DataFrame
            if all_data:
                df = pd.DataFrame(all_data)
                
                # Renommer les colonnes
                df = df.rename(columns={
                    'time': 'timestamp',
                    'volumefrom': 'volume'
                })
                
                # Convertir timestamp en datetime
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
                df.set_index('timestamp', inplace=True)
                
                # Filtrer depuis la date de d√©but
                if since:
                    start_date = pd.to_datetime(since, unit='ms')
                    df = df[df.index >= start_date]
                
                print(f"‚úÖ {len(df)} bougies r√©cup√©r√©es depuis CryptoCompare")
                return df
            
        except Exception as e:
            print(f"Erreur fetch_ohlcv_data: {e}")
            
        return None
    
    def get_historical_data(self, use_cache=USE_CACHE):
        """
        R√©cup√®re les donn√©es historiques avec gestion du cache
        """
        # Nom du fichier de cache incluant le timeframe
        cache_path = f"data/btc_history_{self.timeframe}.csv"
        
        # Cr√©er le dossier data si n√©cessaire
        os.makedirs(os.path.dirname(cache_path) if os.path.dirname(cache_path) else ".", exist_ok=True)
        
        # V√©rifier le cache
        if use_cache and os.path.exists(cache_path):
            try:
                # Lire le cache
                df = pd.read_csv(cache_path, index_col='timestamp', parse_dates=True)
                
                # V√©rifier l'√¢ge du cache
                last_update = df.index[-1]
                hours_old = (datetime.now() - last_update.to_pydatetime()).total_seconds() / 3600
                
                if hours_old < CACHE_EXPIRY_HOURS:
                    print(f"‚úÖ Donn√©es charg√©es depuis le cache ({hours_old:.1f}h)")
                    return df
                else:
                    print(f"üìä Cache expir√©, mise √† jour...")
                    # R√©cup√©rer seulement les nouvelles donn√©es
                    since_ts = int(last_update.timestamp() * 1000)
                    new_data = self.fetch_ohlcv_data(since=since_ts)
                    
                    if new_data is not None and not new_data.empty:
                        df = pd.concat([df, new_data]).drop_duplicates()
                        df.sort_index(inplace=True)
                        df.to_csv(cache_path)
                    return df
                    
            except Exception as e:
                print(f"Erreur lecture cache: {e}")
        
        # Pas de cache ou erreur : r√©cup√©rer toutes les donn√©es
        print("üì• T√©l√©chargement des donn√©es historiques depuis CryptoCompare...")
        
        # Convertir la date de d√©but en timestamp
        since_ts = int(datetime.strptime(START_DATE, "%Y-%m-%d").timestamp() * 1000)
        
        df = self.fetch_ohlcv_data(since=since_ts)
        
        if df is not None and not df.empty:
            # Sauvegarder en cache
            df.to_csv(cache_path)
            print(f"‚úÖ {len(df)} bougies sauvegard√©es")
        
        return df
    
    def add_technical_indicators(self, df):
        """
        Ajoute les indicateurs techniques
        """
        if df is None or df.empty:
            return df
            
        try:
            import ta
            
            # RSI
            df['rsi'] = ta.momentum.RSIIndicator(close=df['close'], window=14).rsi()
            
            # Moyennes mobiles
            df['sma_20'] = ta.trend.SMAIndicator(close=df['close'], window=20).sma_indicator()
            df['sma_50'] = ta.trend.SMAIndicator(close=df['close'], window=50).sma_indicator()
            
            # Bollinger Bands
            bb = ta.volatility.BollingerBands(close=df['close'], window=20, window_dev=2)
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_upper'] = bb.bollinger_hband()
            
            # Volume moyen
            df['volume_sma'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_sma']
            
            # Range
            df['range'] = df['high'] - df['low']
            df['range_pct'] = (df['range'] / df['close']) * 100
            
        except Exception as e:
            print(f"Erreur ajout indicateurs: {e}")
        
        return df
    
    def estimate_liquidations(self, df):
        """
        Estime les liquidations bas√©es sur volume et volatilit√©
        """
        if df is None or df.empty:
            return df
            
        try:
            # Spike de volume + grande bougie = liquidations probables
            df['volume_spike'] = df['volume_ratio'] > 3
            df['price_spike'] = df['range_pct'] > df['range_pct'].rolling(50).mean() * 2
            df['liquidation_signal'] = df['volume_spike'] & df['price_spike']
        except:
            pass
        
        return df

# Fonction utilitaire pour tester
if __name__ == "__main__":
    collector = DataCollector()
    df = collector.get_historical_data()
    if df is not None:
        print(f"\nüìä Donn√©es r√©cup√©r√©es:")
        print(f"P√©riode: {df.index[0]} √† {df.index[-1]}")
        print(f"Nombre de bougies: {len(df)}")
        print(f"\nDerni√®res donn√©es:")
        print(df.tail())